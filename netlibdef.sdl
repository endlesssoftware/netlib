{++
{  NETLIBDEF.SDL
{
{  Definitions for use with NETLIB routines.
{
{  AUTHOR:         Tim Sneddon.
{
{  Copyright (c) 2013, Endless Software Solutions.
{
{  All rights reserved.
{
{  Redistribution and use in source and binary forms, with or without
{  modification, are permitted provided that the following conditions
{  are met:
{
{      * Redistributions of source code must retain the above
{        copyright notice, this list of conditions and the following
{        disclaimer.
{      * Redistributions in binary form must reproduce the above
{        copyright notice, this list of conditions and the following
{        disclaimer in the documentation and/or other materials provided
{        with the distribution.
{      * Neither the name of the copyright owner nor the names of any
{        other contributors may be used to endorse or promote products
{        derived from this software without specific prior written
{        permission.
{
{  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
{  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
{  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
{  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
{  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
{  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
{  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
{  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
{  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
{  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
{  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
{
{  MODIFICATION HISTORY:
{
{  29-Sep-1993	    Madison 	Initial coding.
{  11-Mar-1997	    Madison 	DNS updates, courtesy Claudio Allocchio.
{  27-Nov-1997	    Madison 	Add NETLIB_M_FLUSH.
{  07-Nov-2004      Madison     Add ALLOW_CR.
{  20-Nov-2012      Sneddon     Translate to SDL.  This based on the C and
{				BASIC (thanks to David Sneddon) versions.
{  12-FEB-2013	    Sneddon	Add SSL constants.
{  04-APR-2013	    Sneddon	More corrections to replace old C header.
{  05-AUG-2013	    Sneddon	Add parameter lists to entry definitions.
{  08-AUG-2013	    Sneddon	Add full parameter definitions for routines.
{  19-AUG-2013	    Sneddon	Fix arg. names that were Pascal keywords.
{--
module NETLIBDEF;
iflanguage CC;
literal;
#ifndef __NETLIBDEF_H_LOADED__
#define __NETLIBDEF_H_LOADED__
end_literal;
end_iflanguage CC;

constant NETLIB_K_TYPE_STREAM 	    equals 1;
constant NETLIB_K_TYPE_DGRAM  	    equals 2;

constant NETLIB_K_OPTION_REUSEADDR  equals %x04;
constant NETLIB_K_OPTION_KEEPALIVE  equals %x08;
constant NETLIB_K_OPTION_BROADCAST  equals %x20;

constant NETLIB_K_OPTION_SNDBUF	    equals %x1001;
constant NETLIB_K_OPTION_RCVBUF	    equals %x1002;
constant NETLIB_K_OPTION_SNDLOWAT   equals %x1003;
constant NETLIB_K_OPTION_RCVLOWAT   equals %x1004;

constant NETLIB_K_LEVEL_SOCKET	    equals %xffff;

constant NETLIB_K_AF_INET    	    equals 2;

constant NETLIB_K_LOOKUP_DNS 	    equals 1;
constant NETLIB_K_LOOKUP_HOST_TABLE equals 2;

constant NETLIB_K_SHUTDOWN_RECEIVER equals 0;
constant NETLIB_K_SHUTDOWN_SENDER   equals 1;
constant NETLIB_K_SHUTDOWN_BOTH	    equals 2;

constant NETLIB_M_ALLOW_LF   	    equals %x00000001;
constant NETLIB_M_FLUSH	    	    equals %x00000002;
constant NETLIB_M_ALLOW_CR          equals %x00000004;

constant NETLIB_M_DOMAIN_SEARCH	    equals %x00000001;
constant NETLIB_M_NO_RECURSION	    equals %x00000002;

constant NETLIB_K_DNS_TYPE_A 	    equals %x01;
constant NETLIB_K_DNS_TYPE_NS	    equals %x02;
constant NETLIB_K_DNS_TYPE_MD	    equals %x03;
constant NETLIB_K_DNS_TYPE_MF	    equals %x04;
constant NETLIB_K_DNS_TYPE_CNAME    equals %x05;
constant NETLIB_K_DNS_TYPE_SOA	    equals %x06;
constant NETLIB_K_DNS_TYPE_MB	    equals %x07;
constant NETLIB_K_DNS_TYPE_MG	    equals %x08;
constant NETLIB_K_DNS_TYPE_MR	    equals %x09;
constant NETLIB_K_DNS_TYPE_NULL	    equals %x0A;
constant NETLIB_K_DNS_TYPE_WKS	    equals %x0B;
constant NETLIB_K_DNS_TYPE_PTR	    equals %x0C;
constant NETLIB_K_DNS_TYPE_HINFO    equals %x0D;
constant NETLIB_K_DNS_TYPE_MINFO    equals %x0E;
constant NETLIB_K_DNS_TYPE_MX	    equals %x0F;
constant NETLIB_K_DNS_TYPE_TXT	    equals %x10;
constant NETLIB_K_DNS_TYPE_RP       equals %x11;
constant NETLIB_K_DNS_TYPE_AFSDB    equals %x12;
constant NETLIB_K_DNS_TYPE_X25      equals %x13;
constant NETLIB_K_DNS_TYPE_ISDN     equals %x14;
constant NETLIB_K_DNS_TYPE_RT       equals %x15;
constant NETLIB_K_DNS_TYPE_NSAP     equals %x16;
constant NETLIB_K_DNS_TYPE_NSAP_PTR equals %x17;
constant NETLIB_K_DNS_TYPE_SIG      equals %x18;
constant NETLIB_K_DNS_TYPE_KEY      equals %x19;
constant NETLIB_K_DNS_TYPE_PX       equals %x1A;
constant NETLIB_K_DNS_TYPE_GPOS     equals %x1B;
constant NETLIB_K_DNS_TYPE_AAAA     equals %x1C;
constant NETLIB_K_DNS_TYPE_LOC      equals %x1D;

constant NETLIB_K_DNS_TYPE_UINFO    equals %x64;
constant NETLIB_K_DNS_TYPE_UID      equals %x65;
constant NETLIB_K_DNS_TYPE_GID      equals %x66;
constant NETLIB_K_DNS_TYPE_UNSPEC   equals %x67;

constant NETLIB_K_DNS_TYPE_AXFR     equals %xFC;
constant NETLIB_K_DNS_TYPE_MAILB    equals %xFD;
constant NETLIB_K_DNS_TYPE_MAILA    equals %xFE;

constant NETLIB_K_DNS_QTYPE_ALL	    equals %xFF;

constant NETLIB_K_DNS_CLASS_IN	    equals %x01;
constant NETLIB_K_DNS_CLASS_CS	    equals %x02;
constant NETLIB_K_DNS_CLASS_CH	    equals %x03;
constant NETLIB_K_DNS_CLASS_HS	    equals %x04;
constant NETLIB_K_DNS_QCLASS_ALL    equals %xFF;

constant NETLIB_K_DNS_OP_STDQ	    equals 0;
constant NETLIB_K_DNS_OP_INVQ	    equals 1;
constant NETLIB_K_DNS_OP_STATUS	    equals 2;

constant NETLIB_K_DNS_RC_SUCCESS    equals 0;
constant NETLIB_K_DNS_RC_FMTERR	    equals 1;
constant NETLIB_K_DNS_RC_SRVFAIL    equals 2;
constant NETLIB_K_DNS_RC_NAMERR	    equals 3;
constant NETLIB_K_DNS_RC_NOTIMP	    equals 4;
constant NETLIB_K_DNS_RC_REFUSE	    equals 5;

iflanguage cc;
literal;
#define INADDRDEF inaddrdef
#define MXRRDEF mxrrdef
#define NETLIBIOSBDEF netlibiosbdef
#define NETLIB_DNS_HEADER netlib_dns_header
#define SINDEF sindef
#if defined(__ALPHA) || defined(__ia64__)
#pragma member_alignment save
#pragma nomember_alignment
#endif
#pragma nostandard
end_literal;
end_iflanguage cc;
    aggregate NETLIB_DNS_HEADER structure prefix dns_;
	queryid word unsigned;
	flags_overlay union;
	    flags word unsigned;
    	    flags union tag "x";
		recursion_desired bitfield mask;
		truncated bitfield mask;
		authoritative bitfield mask;
		opcode bitfield mask length 4;
		reply bitfield mask;
		reply_code bitfield mask length 4;
		xx_unused_xx bitfield mask length 3;
		recursion_available bitfield mask;
	    end flags;
    	end flags_overlay;
	qdcount word unsigned;
	ancount word unsigned;
	nscount word unsigned;
	arcount word unsigned;
    end NETLIB_DNS_HEADER;
iflanguage cc;
literal;
#pragma standard
end_literal;
end_iflanguage cc;

constant SOCKADDR_S_DATA	    equals 14;
    aggregate SOCKADDRDEF structure prefix "sockaddr_";
	family word unsigned;
	data byte unsigned dimension SOCKADDR_S_DATA tag "x";
    end SOCKADDRDEF;

    aggregate INADDRDEF structure prefix "inaddr_";
	addr longword unsigned;
    end INADDRDEF;

constant SIN_S_MBZ		    equals 8;
    aggregate SINDEF structure prefix "sin_";
	family word unsigned;
	port word unsigned;
	addr INADDRDEF tag "x";
	mbz byte unsigned dimension SIN_S_MBZ tag "x";
    end SINDEF;

    aggregate NETLIBIOSBDEF structure prefix "iosb_";
	status word unsigned;
	count word unsigned;
	unused longword unsigned;
    end NETLIBIOSBDEF;

constant NETLIB_S_MXRR_NAME  equals 128;
    aggregate MXRRDEF structure prefix "mxrr_";
	preference longword unsigned;
	"length" longword unsigned;
	name character length NETLIB_S_MXRR_NAME;
    end MXRRDEF;

iflanguage BLISS BLISS64;
literal;
MACRO
    NETLIB_DNS_HEADER	= BLOCK [DNS_S_HEADER,BYTE]%,
    SOCKADDRDEF		= BLOCK [SOCKADDR_S_SOCKADDRDEF,BYTE]%,
    INADDRDEF		= BLOCK [INADDR_S_INADDRDEF,BYTE]%,
    SINDEF		= BLOCK [SIN_S_SINDEF,BYTE]%,
    IOSBDEF		= BLOCK [IOSB_S_IOSBDEF,BYTE]%,
    MXRRDEF		= BLOCK [MXRR_S_MXRRDEF,BYTE]%;
end_literal;
end_iflanguage BLISS BLISS64;

constant NETLIB_K_METHOD_ANY    equals 0;
constant NETLIB_K_METHOD_SSL2   equals 1;
constant NETLIB_K_METHOD_SSL3   equals 2;
constant NETLIB_K_METHOD_TLS1   equals 3;

constant NETLIB_K_FILETYPE_PEM  equals 1;
constant NETLIB_K_FILETYPE_ASN1 equals 2;

iflanguage CC;
literal;
#define netlib_word_swap(x) ((((x)>>8)&0xff)|(((x)&0xff)<<8 ))
#define netlib_long_swap(x) ((((x)>>24)&0xff)|(((x)>>8)&0xff00)|(((x)&0xff00)<<8)|((x)<<24))
#ifndef __NETLIB_BUILD__
    unsigned int netlib_socket(void **socket, ...);
    unsigned int netlib_server_setup(void **socket, void *sa, unsigned int *salen);
    unsigned int netlib_bind(void **socket, void *sa, unsigned int *salen, ...);
    unsigned int netlib_getsockname(void **socket, void *sa,
                    unsigned int *sasize, unsigned int *salen, ...);
    unsigned int netlib_getpeername(void **socket, void *sa,
                    unsigned int *sasize, unsigned int *salen, ...);
    unsigned int netlib_connect(void **socket, void *sa, unsigned int *salen, ...);
    unsigned int netlib_write(void **socket, void *bufdsc, ...);
    unsigned int netlib_writeline(void **socket, void *bufdsc, ...);
    unsigned int netlib_read(void **socket, void *bufdsc, ...);
    unsigned int netlib_readline(void **socket, void *bufdsc, ...);
    unsigned int netlib_shutdown(void **socket, ...);
    unsigned int netlib_close(void **socket, ...);
    unsigned int netlib_listen(void **socket, ...);
    unsigned int netlib_accept(void **socket, void **newsock, ...);
    unsigned int netlib_get_hostname(void *bufdsc, ...);
    unsigned int netlib_setsockopt(void **socket, unsigned int *level,
                    unsigned int *option, void *value, unsigned int *vallen, ...);
    unsigned int netlib_getsockopt(void **socket, unsigned int *level,
                    unsigned int *option, void *buffer, unsigned int *bufsize, ...);
    unsigned int netlib_name_to_address(void **socket, unsigned int *which, void *namdsc,
                    void *addrlist, unsigned int *addrlistsize, ...);
    unsigned int netlib_address_to_name(void *socket, unsigned int *which, void *addr,
                    unsigned int *addrsize, void *namdsc, ...);
    int netlib_dns_skipname(unsigned char *bufp, unsigned short *buflen);
    unsigned int netlib_dns_expandname(unsigned char *buf, unsigned short *buflen,
                    unsigned char *bufp, void *namdsc, ...);
    unsigned int netlib_dns_query(void **socket, void *namdsc,
                    unsigned int *class, unsigned int *type,
                    unsigned char *buf, unsigned short *bufsize, ...);
    unsigned int netlib_strtoaddr(void *dsc, struct INADDRDEF *a);
    unsigned int netlib_addrtostr(struct INADDRDEF *a, void *dsc, ...);
    unsigned int netlib_connect_by_name(void **socket,
                    void *dsc, unsigned short *port, ...);
    unsigned int netlib_dns_mx_lookup(void **socket, void *dsc,
                    void *mxrr, unsigned int *mxrrsize, ...);
    unsigned int netlib_hton_long(unsigned int *value);
    unsigned int netlib_ntoh_long(unsigned int *value);
    unsigned short netlib_hton_word(unsigned short *value);
    unsigned short netlib_ntoh_word(unsigned short *value);
    unsigned int   netlib_version(void *dsc, ...);

    unsigned int netlib_ssl_socket(void **sslsock, void **socket, void **ssl);
    unsigned int netlib_ssl_accept(void **sslsock, ...);
    unsigned int netlib_ssl_connect(void **sslsock, ...);
    unsigned int netlib_ssl_shutdown(void **sslsock, ...);
    unsigned int netlib_ssl_read(void **sslsock, void *bufdsc, ...);
    unsigned int netlib_ssl_write(void **sslsock, void *bufdsc, ...);
    unsigned int netlib_ssl_version(void *dsc, ...);
#endif /* not __NETLIB_BUILD__ */
end_literal;
end_iflanguage CC;

iflanguage ADA BASIC FORTRAN FORTRAN_STEVE_LIONEL FORTV3 MACRO PASCAL PLI SDML;

/*
/* Socket Routines...
/*

    /*
    /* NETLIB_SOCKET
    /*
    /*	Create socket
    /*
    /*	socket	= new socket
    /*	socktyp = socket type
    /*  family	= socket family
    /*
    entry netlib_socket parameter (
	longword unsigned named socket out typename context,
	longword unsigned named socktyp in,
	longword unsigned named family in
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SERVER_SETUP
    /*
    /*	Socket setup for inetd server
    /*	
    /*	socket	= socket to bind
    /*	sa	= socket address (IP address, port, etc.)
    /*	salen	= length of sa
    /*
    entry netlib_server_setup parameter (
	longword unsigned named socket out typename context,
	SINDEF named sa in typename structure,
	longword unsigned named salen in
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_BIND
    /*
    /*	Set address and/or port for socket.
    /*
    /*	socket	= socket to bind
    /*	sa	= socket address (IP address, port, etc.)
    /*	salen	= length of sa
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_bind parameter (
	longword unsigned named socket in out typename context,
	SINDEF named sa in typename structure,
	longword unsigned named salen in,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_GETSOCKNAME
    /*
    /*	Return local information for socket
    /*
    /*	socket	= socket to query
    /*	sa	= SINDEF structure
    /*	sasize	= size of sa
    /*  salen	= returned length of sa
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_getsockname parameter (
	longword unsigned named socket in typename context,
	SINDEF named sa out typename structure,
	longword unsigned named sasize in,
	longword unsigned named salen out,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_GETPEERNAME
    /*
    /*	Return remote information for socket
    /*
    /*	socket	= socket to query
    /*	sa	= SINDEF structure
    /*	sasize	= size of sa
    /*  salen	= returned length of sa
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_getpeername parameter (
	longword unsigned named socket in typename context,
	SINDEF named sa out typename structure,
	longword unsigned named sasize in,
	longword unsigned named salen out,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_CONNECT
    /*
    /*	Establish a connection to a remote system.
    /*
    /*	socket	= socket to connect
    /*	sa	= socket address describing where to connect
    /*	salen	= length of sa
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_connect parameter (
	longword unsigned named socket in typename context,
	SINDEF named sa in typename structure,
	longword unsigned named salen in,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SHUTDOWN
    /*
    /*	Shutdown connection (don't delete socket)
    /*
    /*	socket	= socket to shutdown
    /*  shuttype= type of shutdown
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_shutdown parameter (
	longword unsigned named socket in out typename context,
	longword unsigned named shuttype in,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned;

    /*
    /* NETLIB_CLOSE
    /*
    /*	Close a socket
    /*
    /*	socket	= socket to close
    /*
    entry netlib_close parameter (
	longword unsigned named socket in typename context
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_ACCEPT
    /*
    /*	Wait for incoming connections
    /*
    /*	socket	= socket to connect
    /*	newsocket = new incoming socket
    /*	ra	= socket address describing remote end
    /*	rasize	= length of ra
    /*	ralen	= returned length of ra
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_accept parameter (
	longword unsigned named socket in typename context,
	longword unsigned named newsocket out typename context,
	SINDEF named ra out typename structure,
	longword unsigned named rasize in,
	longword unsigned named ralen out,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_GETSOCKOPT
    /*
    /*	Get socket option
    /*
    /*	socket	= socket to query
    /*  level	= level of option
    /*  option	= option
    /*  value	= address of result storage
    /*  valsize	= size of value
    /*  vallen	= returned length of value
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_getsockopt parameter (
	longword unsigned named socket in typename context,
	longword unsigned named level in,
	longword unsigned named option in,
	longword unsigned value named "value" typename varying_arg,
	longword unsigned named valsize in,
	longword unsigned named vallen out,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_ADDRESS_TO_NAME
    /*
    /*	Get the hostname of an IP address
    /*
    /*  socket	= socket to get info about
    /*  which	= optional, type of DNS lookup
    /*  address	= INADDRDEF to be looked up
    /*  addrsize= length of address
    /*  hostname= descriptor to receive hostname
    /*  retlen	= hostname length
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_address_to_name parameter (
	longword unsigned named socket in typename context,
	longword unsigned named which in default 0,
	INADDRDEF named address in typename structure,
	longword unsigned named addrsize in,
	character descriptor named hostname out typename char_string,
	word unsigned named retlen out,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_DNS_MX_LOOKUP
    /*
    /*	Look up MX records for a domain name
    /*
    /*	socket	= a socket
    /*	hostname= hostname to lookup
    /*  mxrrlist= array of MXRRDEF structures
    /*  mxrrsize= number elements in mxrrlist
    /*  mxrrcnt = number of elements actually written
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_dns_mx_lookup parameter (
	longword unsigned named socket in typename context,
	character descriptor named name in typename char_string,
	MXRRDEF dimension * named mxrrlist out typename structure,
	longword unsigned named mxrrsize in,
	longword unsigned named mxrrcnt out optional,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_DNS_SKIPNAME
    /*
    /*	Skip a name in a DNS response
    /*
    /*	bufptr	= pointer to DNS response area
    /*	buflen	= count of bytes in buffer from bufptr
    /*
    entry netlib_dns_skipname parameter (
	address value named bufptr in typename "pointer",
	word unsigned named buflen in
    ) returns longword unsigned;

    /*
    /* NETLIB_DNS_EXPANDNAME
    /*
    /*	Expand name is DNS response
    /*
    /*	buffer	= start of DNS response buffer
    /*	buflen	= buffer size
    /*	bufptr	= area containing domain name
    /*	name	= descriptor to receive expanded name
    /*	retlen	= optional, length of name
    /*  skipcount=number of bytes in buffer used
    /*
    entry netlib_dns_expandname parameter (
	address value named bufstart typename "pointer",
	word unsigned named buflen in,
	address value named bufptr typename "pointer",
	character descriptor named name out typename char_string,
	word unsigned named retlen out optional,
	word unsigned named skipcount out optional
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_DNS_QUERY
    /*
    /*	Perform a DNS query
    /*
    /*	socket	= a socket
    /*	name	= domain name to look up
    /*	class	= class of query
    /*	qtype	= type of query
    /*	buffer	= buffer to receive dns response
    /*	bufsize	= size of buffer in bytes
    /*	flags	= query options
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_dns_query parameter (
	longword unsigned named socket in typename context,
	character descriptor named name in typename char_string,
	longword unsigned named class in default 0,
	longword unsigned named qtype in,
	address value named buffer typename varying_arg,
	word unsigned named bufsize in,
	longword unsigned named flags in optional typename longword_mask,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_STRTOADDR
    /*
    /*	Convert a dotted-address to binary form
    /*
    /*	string	= input IP address string
    /*  address	= output binary address
    /*
    entry netlib_strtoaddr parameter (
	character descriptor named "string" in typename char_string,
	INADDRDEF named "address" out typename structure
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_NAME_TO_ADDRESS
    /*
    /*	Get IP address(es) for a host name
    /*
    /*  socket	= socket to get info about
    /*  which   = type of lookup
    /*  hostname= host name to look up
    /*  addrlist= array of INADDRDEF structures
    /*  addrsize= number elements in addrlist
    /*  addrcnt = number of elements actually written
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_name_to_address parameter (
	longword unsigned named socket in typename context,
	longword unsigned named which in,
	character descriptor named hostname in typename char_string,
	INADDRDEF dimension * named addrlist out typename structure,
	longword unsigned named addrsize in,
	longword unsigned named addrcnt out optional,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_GET_HOSTNAME
    /*
    /*	Return internet hostname of local host
    /*	
    /*	namdsc	= string to receive hostname
    /*	retlen	= optional, return length of hostname
    /*
    entry netlib_get_hostname parameter (
	character descriptor named namdsc out typename char_string optional,
	word unsigned named retlen out optional
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SETSOCKOPT
    /*
    /*	Set socket option
    /*
    /*	socket	= socket to query
    /*  level	= level of option
    /*  option	= option
    /*  value	= address of result storage
    /*  vallen	= size of value
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_setsockopt parameter (
	longword unsigned named socket in typename context,
	longword unsigned named level in,
	longword unsigned named option in,
	longword unsigned value named "value" typename varying_arg,
	longword unsigned named vallen in,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_LISTEN
    /*
    /*	Configure socket to receive connections
    /*
    /*	socket	= socket to query
    /*  level	= backlog connections
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_listen parameter (
	longword unsigned named socket in typename context,
	longword unsigned named backlog in optional,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_WRITE
    /*
    /*	Write data to socket
    /*
    /*	socket	= socket to read from
    /*  buffer	= receive buffer
    /*	sa	= optional, SINDEF structure
    /*	salen	= optional, size of sa
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_write parameter (
	longword unsigned named socket in typename longword_unsigned,
	character descriptor named buffer in typename char_string,
	SINDEF named sa in optional typename structure,
	longword unsigned named salen in optional,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_WRITELINE
    /*
    /*	Write data to socket adding terminating CR/LF pair.
    /*
    /*	socket	= socket to read from
    /*  buffer	= receive buffer
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_writeline parameter (
	longword unsigned named socket in typename longword_unsigned,
	character descriptor named buffer in typename char_string,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_READ
    /*
    /*	Read data from socket
    /*
    /*	socket	= socket to read from
    /*  buffer	= receive buffer
    /*	sa	= optional, SINDEF structure
    /*	sasize	= optional, size of sa
    /*  salen	= optional, returned length of sa
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_read parameter (
	longword unsigned named socket in typename longword_unsigned,
	character descriptor named buffer out typename char_string,
	SINDEF named sa out optional typename structure,
	longword unsigned named sasize in optional,
	longword unsigned named salen out optional,
	quadword unsigned named timeout in optional typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_READLINE
    /*
    /*	Read line from socket
    /*
    /*	socket	= socket to read from
    /*  buffer	= buffer to receive line
    /*  retlen	= optional, return length of buffer
    /*  flags	= optional, control flags
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_readline parameter (
	longword unsigned named socket in typename longword_unsigned,
	character descriptor named buffer out typename char_string,
	word unsigned named retlen out optional,
	longword unsigned named flags in optional typename bitmask,
	quadword unsigned named timeout in optional typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*	
    /*	NETLIB_ADDRTOSTR
    /*	
    /*	Convert binary IP to string
    /*	
    /*	address	= INADDRDEF structure
    /*	string	= string to receive address
    /*	retlen	= optional, return length of string
    /*	
    entry netlib_addrtostr parameter (
	INADDRDEF named address in typename structure,
	character descriptor named "string" out typename char_string,
	word unsigned named retlen out optional
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_CONNECT_BY_NAME
    /*
    /*	Connect to remote host by name.
    /*
    /*	socket	= stream socket allocated by NETLIB_SOCKET
    /*	hostname= string containing the hostname
    /*	port	= port number in host order
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_connect_by_name parameter (
	longword unsigned named socket in typename longword_unsigned,
	character descriptor named hostname in typename char_string,
	word unsigned named port in,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_HTON_LONG
    /*
    /*	Convert host-order longword to network-order
    /*
    /*	value	= longword to convert
    /*
    entry netlib_hton_long parameter (
	longword unsigned named "value" in
    ) returns longword unsigned;

    /*
    /* NETLIB_NTOH_LONG
    /*
    /*	Convert network-order longword to host-order
    /*
    /*	value	= longword to convert
    /*
    entry netlib_ntoh_long parameter (
	longword unsigned named "value" in
    ) returns longword unsigned;

    /*
    /* NETLIB_HTON_WORD
    /*
    /*	Convert host-order word to network-order
    /*
    /*	value	= word to convert
    /*
    entry netlib_hton_word parameter (
	word unsigned named "value" in
    ) returns word unsigned;

    /*
    /* NETLIB_NTOH_WORD
    /*
    /*	Convert network-order word to host-order
    /*
    /*	value	= word to convert
    /*
    entry netlib_ntoh_word parameter (
	word unsigned named "value" in
    ) returns word unsigned;

    /*
    /* NETLIB_VERSION
    /*
    /*	Return NETLIB version
    /*	
    /*	strver	= string to receive version string
    /*	retlen	= optional, return length of string
    /*
    entry netlib_version parameter (
	character descriptor named strver out typename char_string optional,
	word unsigned named retlen out optional
    ) returns longword unsigned typename cond_value;


/*
/* SSL Routines
/*


entry netlib_ssl_context returns longword unsigned;

    /*
    /* NETLIB_SSL_SOCKET
    /*
    /*	Allocate an SSL socket
    /*
    /*  context = SSL socket
    /*	socket	= NETLIB socket
    /*	ssl_ctx	= SSL_CTX structure
    /*
    entry netlib_ssl_socket parameter (
	longword unsigned named context out typename context,
	longword unsigned named socket in typename context,
	longword unsigned named ssl_ctx in typename context
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_ACCEPT
    /*
    /*	Accept incoming SSL connection
    /*
    /*  context = SSL socket
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_ssl_accept parameter (
	longword unsigned named context in out typename context,
	quadword unsigned named timeout in default 0 typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_CONNECT
    /*
    /*	Establish an SSL connection to a remote system.
    /*
    /*  context = SSL socket
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_ssl_connect parameter (
	longword unsigned named context in out typename context,
	quadword unsigned named timeout in default 0 typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_SHUTDOWN
    /*
    /*	Shutdown SSL socket (don't delete socket)
    /*
    /*  context = SSL socket
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_ssl_shutdown parameter (
	longword unsigned named context in out typename context,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_CLOSE
    /*
    /*	Close an SSL socket
    /*
    /*	socket	= socket to close
    /*
    entry netlib_ssl_close parameter (
	longword unsigned named socket in typename context
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_READ
    /*
    /*	Read data from SSL socket
    /*
    /*  context = SSL socket
    /*  buffer	= receive buffer
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_ssl_read parameter (
	longword unsigned named context in out typename context,
	character descriptor named buffer in typename char_string,
	quadword unsigned named timeout in default 0 typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_WRITE
    /*
    /*	Write data to SSL socket
    /*
    /*  context = SSL socket
    /*  buffer	= receive buffer
    /*  timeout	= optional, read timeout
    /*	iosb	= optional, I/O status block
    /*	astadr	= optional, I/O completion AST
    /*	astprm	= optional, AST parameter
    /*
    entry netlib_ssl_write parameter (
	longword unsigned named context in out typename context,
	character descriptor named buffer in typename char_string,
	quadword unsigned named timeout in default 0 typename delta_time,
	NETLIBIOSBDEF named iosb out optional typename io_status_block,
	address(entry) value named astadr in optional typename ast_procedure,
	longword unsigned value named astprm in optional typename user_arg
    ) returns longword unsigned typename cond_value;

    /*
    /* NETLIB_SSL_VERSION
    /*
    /*	Return OpenSSL library version
    /*	
    /*	strver	= optional, string to receive version string
    /*	retlen	= optional, return length of string
    /*	numver  = optional, longword to receive version as number
    /*
    entry netlib_ssl_version parameter (
	character descriptor named strver out typename char_string optional,
	word unsigned named retlen out optional,
	longword unsigned named numver out optional
    ) returns longword unsigned typename cond_value;

end_iflanguage;

iflanguage BLISS BLISS64 BLISSF;
literal;
!+
!   Definitions for V1 NETLIB - OBSOLETE!
!-
LITERAL
    NET_K_TCP   = 1,
    NET_K_UDP   = 2,
    NET_M_PUSH  = 1,
    NET_M_NOTRM = 2;
MACRO
    NET_V_PUSH  = 0,0,1,0%,
    NET_V_NOTRM = 0,1,1,0%;
end_literal;
end_iflanguage BLISS BLISS64 BLISSF;

iflanguage CC;
literal;
#endif /* __NETLIBDEF_H_LOADED__ */
end_literal;
end_iflanguage CC;
end_module NETLIBDEF;
