/********************************************************************************************************************************/
/* Created: 16-Aug-2013 12:28:04 by OpenVMS SDL EV2-3      */
/* Source:  16-AUG-2013 12:27:11 MG_SRC:[NETLIB]NETLIBDEF.SDL;67 */
/********************************************************************************************************************************/
 
/*** MODULE NETLIBDEF ***/
%replace NETLIB_K_TYPE_STREAM by 1;
%replace NETLIB_K_TYPE_DGRAM by 2;
%replace NETLIB_K_OPTION_REUSEADDR by 4;
%replace NETLIB_K_OPTION_KEEPALIVE by 8;
%replace NETLIB_K_OPTION_BROADCAST by 32;
%replace NETLIB_K_OPTION_SNDBUF by 4097;
%replace NETLIB_K_OPTION_RCVBUF by 4098;
%replace NETLIB_K_OPTION_SNDLOWAT by 4099;
%replace NETLIB_K_OPTION_RCVLOWAT by 4100;
%replace NETLIB_K_LEVEL_SOCKET by 65535;
%replace NETLIB_K_AF_INET by 2;
%replace NETLIB_K_LOOKUP_DNS by 1;
%replace NETLIB_K_LOOKUP_HOST_TABLE by 2;
%replace NETLIB_K_SHUTDOWN_RECEIVER by 0;
%replace NETLIB_K_SHUTDOWN_SENDER by 1;
%replace NETLIB_K_SHUTDOWN_BOTH by 2;
%replace NETLIB_M_ALLOW_LF by 1;
%replace NETLIB_M_FLUSH by 2;
%replace NETLIB_M_ALLOW_CR by 4;
%replace NETLIB_M_DOMAIN_SEARCH by 1;
%replace NETLIB_M_NO_RECURSION by 2;
%replace NETLIB_K_DNS_TYPE_A by 1;
%replace NETLIB_K_DNS_TYPE_NS by 2;
%replace NETLIB_K_DNS_TYPE_MD by 3;
%replace NETLIB_K_DNS_TYPE_MF by 4;
%replace NETLIB_K_DNS_TYPE_CNAME by 5;
%replace NETLIB_K_DNS_TYPE_SOA by 6;
%replace NETLIB_K_DNS_TYPE_MB by 7;
%replace NETLIB_K_DNS_TYPE_MG by 8;
%replace NETLIB_K_DNS_TYPE_MR by 9;
%replace NETLIB_K_DNS_TYPE_NULL by 10;
%replace NETLIB_K_DNS_TYPE_WKS by 11;
%replace NETLIB_K_DNS_TYPE_PTR by 12;
%replace NETLIB_K_DNS_TYPE_HINFO by 13;
%replace NETLIB_K_DNS_TYPE_MINFO by 14;
%replace NETLIB_K_DNS_TYPE_MX by 15;
%replace NETLIB_K_DNS_TYPE_TXT by 16;
%replace NETLIB_K_DNS_TYPE_RP by 17;
%replace NETLIB_K_DNS_TYPE_AFSDB by 18;
%replace NETLIB_K_DNS_TYPE_X25 by 19;
%replace NETLIB_K_DNS_TYPE_ISDN by 20;
%replace NETLIB_K_DNS_TYPE_RT by 21;
%replace NETLIB_K_DNS_TYPE_NSAP by 22;
%replace NETLIB_K_DNS_TYPE_NSAP_PTR by 23;
%replace NETLIB_K_DNS_TYPE_SIG by 24;
%replace NETLIB_K_DNS_TYPE_KEY by 25;
%replace NETLIB_K_DNS_TYPE_PX by 26;
%replace NETLIB_K_DNS_TYPE_GPOS by 27;
%replace NETLIB_K_DNS_TYPE_AAAA by 28;
%replace NETLIB_K_DNS_TYPE_LOC by 29;
%replace NETLIB_K_DNS_TYPE_UINFO by 100;
%replace NETLIB_K_DNS_TYPE_UID by 101;
%replace NETLIB_K_DNS_TYPE_GID by 102;
%replace NETLIB_K_DNS_TYPE_UNSPEC by 103;
%replace NETLIB_K_DNS_TYPE_AXFR by 252;
%replace NETLIB_K_DNS_TYPE_MAILB by 253;
%replace NETLIB_K_DNS_TYPE_MAILA by 254;
%replace NETLIB_K_DNS_QTYPE_ALL by 255;
%replace NETLIB_K_DNS_CLASS_IN by 1;
%replace NETLIB_K_DNS_CLASS_CS by 2;
%replace NETLIB_K_DNS_CLASS_CH by 3;
%replace NETLIB_K_DNS_CLASS_HS by 4;
%replace NETLIB_K_DNS_QCLASS_ALL by 255;
%replace NETLIB_K_DNS_OP_STDQ by 0;
%replace NETLIB_K_DNS_OP_INVQ by 1;
%replace NETLIB_K_DNS_OP_STATUS by 2;
%replace NETLIB_K_DNS_RC_SUCCESS by 0;
%replace NETLIB_K_DNS_RC_FMTERR by 1;
%replace NETLIB_K_DNS_RC_SRVFAIL by 2;
%replace NETLIB_K_DNS_RC_NAMERR by 3;
%replace NETLIB_K_DNS_RC_NOTIMP by 4;
%replace NETLIB_K_DNS_RC_REFUSE by 5;
%replace dns_m_recursion_desired by '10000000000000000000000000000000'b;
%replace dns_m_truncated by '10000000000000000000000000000000'b;
%replace dns_m_authoritative by '10000000000000000000000000000000'b;
%replace dns_m_opcode by '11110000000000000000000000000000'b;
%replace dns_m_reply by '10000000000000000000000000000000'b;
%replace dns_m_reply_code by '11110000000000000000000000000000'b;
%replace dns_m_xx_unused_xx by '11100000000000000000000000000000'b;
%replace dns_m_recursion_available by '10000000000000000000000000000000'b;
 
%replace dns_S_NETLIB_DNS_HEADER by 12;
dcl 1 NETLIB_DNS_HEADER  based,
     2 dns_w_queryid fixed binary(15),
     2 dns_r_flags_overlay union,
      3 dns_w_flags fixed binary(15),
      3 dns_x_flags union,
       4 dns_v_recursion_desired bit(1),
       4 dns_v_truncated bit(1),
       4 dns_v_authoritative bit(1),
       4 dns_v_opcode bit(4),
       4 dns_v_reply bit(1),
       4 dns_v_reply_code bit(4),
       4 dns_v_xx_unused_xx bit(3),
       4 dns_v_recursion_available bit(1),
     2 dns_w_qdcount fixed binary(15),
     2 dns_w_ancount fixed binary(15),
     2 dns_w_nscount fixed binary(15),
     2 dns_w_arcount fixed binary(15);
%replace SOCKADDR_S_DATA by 14;
 
%replace sockaddr_S_SOCKADDRDEF by 16;
dcl 1 SOCKADDRDEF  based,
     2 sockaddr_w_family fixed binary(15),
     2 sockaddr_x_data (1:14) fixed binary(7);
 
%replace inaddr_S_INADDRDEF by 4;
dcl 1 INADDRDEF  based,
     2 inaddr_l_addr fixed binary(31);
%replace SIN_S_MBZ by 8;
 
%replace sin_S_SINDEF by 16;
dcl 1 SINDEF  based,
     2 sin_w_family fixed binary(15),
     2 sin_w_port fixed binary(15),
     2 sin_x_addr like INADDRDEF,
     2 sin_x_mbz (1:8) fixed binary(7);
 
%replace iosb_S_NETLIBIOSBDEF by 8;
dcl 1 NETLIBIOSBDEF  based,
     2 iosb_w_status fixed binary(15),
     2 iosb_w_count fixed binary(15),
     2 iosb_l_unused fixed binary(31);
%replace NETLIB_S_MXRR_NAME by 128;
 
%replace mxrr_S_MXRRDEF by 136;
dcl 1 MXRRDEF  based,
     2 mxrr_l_preference fixed binary(31),
     2 mxrr_l_length fixed binary(31),
     2 mxrr_t_name character(128);
%replace NETLIB_K_METHOD_ANY by 0;
%replace NETLIB_K_METHOD_SSL2 by 1;
%replace NETLIB_K_METHOD_SSL3 by 2;
%replace NETLIB_K_METHOD_TLS1 by 3;
%replace NETLIB_K_FILETYPE_PEM by 1;
%replace NETLIB_K_FILETYPE_ASN1 by 2;
/*                                                                          */
/* Socket Routines...                                                       */
/*                                                                          */
/*                                                                          */
/* NETLIB_SOCKET                                                            */
/*                                                                          */
/*	Create socket                                                       */
/*                                                                          */
/*	socket	= new socket                                                */
/*	type	= socket type                                               */
/*  family	= socket family                                             */
/*                                                                          */
dcl netlib_socket entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SERVER_SETUP                                                      */
/*                                                                          */
/*	Socket setup for inetd server                                       */
/*	                                                                    */
/*	socket	= socket to bind                                            */
/*	sa	= socket address (IP address, port, etc.)                   */
/*	salen	= length of sa                                              */
/*                                                                          */
dcl netlib_server_setup entry (
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_BIND                                                              */
/*                                                                          */
/*	Set address and/or port for socket.                                 */
/*                                                                          */
/*	socket	= socket to bind                                            */
/*	sa	= socket address (IP address, port, etc.)                   */
/*	salen	= length of sa                                              */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_bind entry (
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_GETSOCKNAME                                                       */
/*                                                                          */
/*	Return local information for socket                                 */
/*                                                                          */
/*	socket	= socket to query                                           */
/*	sa	= SINDEF structure                                          */
/*	sasize	= size of sa                                                */
/*  salen	= returned length of sa                                     */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_getsockname entry (
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_GETPEERNAME                                                       */
/*                                                                          */
/*	Return remote information for socket                                */
/*                                                                          */
/*	socket	= socket to query                                           */
/*	sa	= SINDEF structure                                          */
/*	sasize	= size of sa                                                */
/*  salen	= returned length of sa                                     */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_getpeername entry (
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_CONNECT                                                           */
/*                                                                          */
/*	Establish a connection to a remote system.                          */
/*                                                                          */
/*	socket	= socket to connect                                         */
/*	sa	= socket address describing where to connect                */
/*	salen	= length of sa                                              */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_connect entry (
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SHUTDOWN                                                          */
/*                                                                          */
/*	Shutdown connection (don't delete socket)                           */
/*                                                                          */
/*	socket	= socket to shutdown                                        */
/*  shuttype= type of shutdown                                              */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_shutdown entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_CLOSE                                                             */
/*                                                                          */
/*	Close a socket                                                      */
/*                                                                          */
/*	socket	= socket to close                                           */
/*                                                                          */
dcl netlib_close entry (
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_ACCEPT                                                            */
/*                                                                          */
/*	Wait for incoming connections                                       */
/*                                                                          */
/*	socket	= socket to connect                                         */
/*	newsocket = new incoming socket                                     */
/*	ra	= socket address describing remote end                      */
/*	rasize	= length of ra                                              */
/*	ralen	= returned length of ra                                     */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_accept entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like SINDEF reference,
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_GETSOCKOPT                                                        */
/*                                                                          */
/*	Get socket option                                                   */
/*                                                                          */
/*	socket	= socket to query                                           */
/*  level	= level of option                                           */
/*  option	= option                                                    */
/*  value	= address of result storage                                 */
/*  valsize	= size of value                                             */
/*  vallen	= returned length of value                                  */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_getsockopt entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	fixed binary(31) reference,
	any value,
	fixed binary(31) reference,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_ADDRESS_TO_NAME                                                   */
/*                                                                          */
/*	Get the hostname of an IP address                                   */
/*                                                                          */
/*  socket	= socket to get info about                                  */
/*  which	= optional, type of DNS lookup                              */
/*  address	= INADDRDEF to be looked up                                 */
/*  addrsize= length of address                                             */
/*  hostname= descriptor to receive hostname                                */
/*  retlen	= hostname length                                           */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_address_to_name entry (
	fixed binary(31) reference,
	fixed binary(31) reference optional,
	1 like INADDRDEF reference,
	fixed binary(31) reference,
	character(*),
	fixed binary(15) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_DNS_MX_LOOKUP                                                     */
/*                                                                          */
/*	Look up MX records for a domain name                                */
/*                                                                          */
/*	socket	= a socket                                                  */
/*	hostname= hostname to lookup                                        */
/*  mxrrlist= array of MXRRDEF structures                                   */
/*  mxrrsize= number elements in mxrrlist                                   */
/*  mxrrcnt = number of elements actually written                           */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_dns_mx_lookup entry (
	fixed binary(31) reference,
	character(*),
	1 (*) like MXRRDEF reference,
	fixed binary(31) reference,
	fixed binary(31) reference optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_DNS_SKIPNAME                                                      */
/*                                                                          */
/*	Skip a name in a DNS response                                       */
/*                                                                          */
/*	bufptr	= pointer to DNS response area                              */
/*	buflen	= count of bytes in buffer from bufptr                      */
/*                                                                          */
dcl netlib_dns_skipname entry (
	entry value,
	fixed binary(15) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_DNS_EXPANDNAME                                                    */
/*                                                                          */
/*	Expand name is DNS response                                         */
/*                                                                          */
/*	buffer	= start of DNS response buffer                              */
/*	buflen	= buffer size                                               */
/*	bufptr	= area containing domain name                               */
/*	name	= descriptor to receive expanded name                       */
/*	retlen	= optional, length of name                                  */
/*  skipcount=number of bytes in buffer used                                */
/*                                                                          */
dcl netlib_dns_expandname entry (
	entry value,
	fixed binary(15) reference,
	entry value,
	character(*),
	fixed binary(15) reference optional truncate,
	fixed binary(15) reference optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_DNS_QUERY                                                         */
/*                                                                          */
/*	Perform a DNS query                                                 */
/*                                                                          */
/*	socket	= a socket                                                  */
/*	name	= domain name to look up                                    */
/*	class	= class of query                                            */
/*	type	= type of query                                             */
/*	buffer	= buffer to receive dns response                            */
/*	bufsize	= size of buffer in bytes                                   */
/*	flags	= query options                                             */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_dns_query entry (
	fixed binary(31) reference,
	character(*),
	fixed binary(31) reference optional,
	fixed binary(31) reference,
	any value,
	fixed binary(15) reference,
	fixed binary(31) reference optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_STRTOADDR                                                         */
/*                                                                          */
/*	Convert a dotted-address to binary form                             */
/*                                                                          */
/*	string	= input IP address string                                   */
/*  address	= output binary address                                     */
/*                                                                          */
dcl netlib_strtoaddr entry (
	character(*),
	1 like INADDRDEF reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_NAME_TO_ADDRESS                                                   */
/*                                                                          */
/*	Get IP address(es) for a host name                                  */
/*                                                                          */
/*  socket	= socket to get info about                                  */
/*  which   = type of lookup                                                */
/*  hostname= host name to look up                                          */
/*  addrlist= array of INADDRDEF structures                                 */
/*  addrsize= number elements in addrlist                                   */
/*  addrcnt = number of elements actually written                           */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_name_to_address entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	character(*),
	1 (*) like INADDRDEF reference,
	fixed binary(31) reference,
	fixed binary(31) reference optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_GET_HOSTNAME                                                      */
/*                                                                          */
/*	Return internet hostname of local host                              */
/*	                                                                    */
/*	namdsc	= string to receive hostname                                */
/*	retlen	= optional, return length of hostname                       */
/*                                                                          */
dcl netlib_get_hostname entry (
	character(*) optional truncate,
	fixed binary(15) reference optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SETSOCKOPT                                                        */
/*                                                                          */
/*	Set socket option                                                   */
/*                                                                          */
/*	socket	= socket to query                                           */
/*  level	= level of option                                           */
/*  option	= option                                                    */
/*  value	= address of result storage                                 */
/*  vallen	= size of value                                             */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_setsockopt entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	fixed binary(31) reference,
	any value,
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_LISTEN                                                            */
/*                                                                          */
/*	Configure socket to receive connections                             */
/*                                                                          */
/*	socket	= socket to query                                           */
/*  level	= backlog connections                                       */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_listen entry (
	fixed binary(31) reference,
	fixed binary(31) reference optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_WRITE                                                             */
/*                                                                          */
/*	Write data to socket                                                */
/*                                                                          */
/*	socket	= socket to read from                                       */
/*  buffer	= receive buffer                                            */
/*	sa	= optional, SINDEF structure                                */
/*	salen	= optional, size of sa                                      */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_write entry (
	fixed binary(31) reference,
	character(*),
	1 like SINDEF reference optional truncate,
	fixed binary(31) reference optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_WRITELINE                                                         */
/*                                                                          */
/*	Write data to socket adding terminating CR/LF pair.                 */
/*                                                                          */
/*	socket	= socket to read from                                       */
/*  buffer	= receive buffer                                            */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_writeline entry (
	fixed binary(31) reference,
	character(*),
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_READ                                                              */
/*                                                                          */
/*	Read data from socket                                               */
/*                                                                          */
/*	socket	= socket to read from                                       */
/*  buffer	= receive buffer                                            */
/*	sa	= optional, SINDEF structure                                */
/*	sasize	= optional, size of sa                                      */
/*  salen	= optional, returned length of sa                           */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_read entry (
	fixed binary(31) reference,
	character(*),
	1 like SINDEF reference optional truncate,
	fixed binary(31) reference optional truncate,
	fixed binary(31) reference optional truncate,
	any optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_READLINE                                                          */
/*                                                                          */
/*	Read line from socket                                               */
/*                                                                          */
/*	socket	= socket to read from                                       */
/*  buffer	= buffer to receive line                                    */
/*  retlen	= optional, return length of buffer                         */
/*  flags	= optional, control flags                                   */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_readline entry (
	fixed binary(31) reference,
	character(*),
	fixed binary(15) reference optional truncate,
	fixed binary(31) reference optional truncate,
	any optional truncate,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*	                                                                    */
/*	NETLIB_ADDRTOSTR                                                    */
/*	                                                                    */
/*	Convert binary IP to string                                         */
/*	                                                                    */
/*	address	= INADDRDEF structure                                       */
/*	string	= string to receive address                                 */
/*	retlen	= optional, return length of string                         */
/*	                                                                    */
dcl netlib_addrtostr entry (
	1 like INADDRDEF reference,
	character(*),
	fixed binary(15) reference optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_CONNECT_BY_NAME                                                   */
/*                                                                          */
/*	Connect to remote host by name.                                     */
/*                                                                          */
/*	socket	= stream socket allocated by NETLIB_SOCKET                  */
/*	hostname= string containing the hostname                            */
/*	port	= port number in host order                                 */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_connect_by_name entry (
	fixed binary(31) reference,
	character(*),
	fixed binary(15) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_HTON_LONG                                                         */
/*                                                                          */
/*	Convert host-order longword to network-order                        */
/*                                                                          */
/*	value	= longword to convert                                       */
/*                                                                          */
dcl netlib_hton_long entry (
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_NTOH_LONG                                                         */
/*                                                                          */
/*	Convert network-order longword to host-order                        */
/*                                                                          */
/*	value	= longword to convert                                       */
/*                                                                          */
dcl netlib_ntoh_long entry (
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_HTON_WORD                                                         */
/*                                                                          */
/*	Convert host-order word to network-order                            */
/*                                                                          */
/*	value	= word to convert                                           */
/*                                                                          */
dcl netlib_hton_word entry (
	fixed binary(15) reference)
	returns (fixed binary(15));
/*                                                                          */
/* NETLIB_NTOH_WORD                                                         */
/*                                                                          */
/*	Convert network-order word to host-order                            */
/*                                                                          */
/*	value	= word to convert                                           */
/*                                                                          */
dcl netlib_ntoh_word entry (
	fixed binary(15) reference)
	returns (fixed binary(15));
/*                                                                          */
/* NETLIB_VERSION                                                           */
/*                                                                          */
/*	Return NETLIB version                                               */
/*	                                                                    */
/*	strver	= string to receive version string                          */
/*	retlen	= optional, return length of string                         */
/*                                                                          */
dcl netlib_version entry (
	character(*) optional truncate,
	fixed binary(15) reference optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* SSL Routines                                                             */
/*                                                                          */
dcl netlib_ssl_context entry 
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_SOCKET                                                        */
/*                                                                          */
/*	Allocate an SSL socket                                              */
/*                                                                          */
/*  context = SSL socket                                                    */
/*	socket	= NETLIB socket                                             */
/*	ssl_ctx	= SSL_CTX structure                                         */
/*                                                                          */
dcl netlib_ssl_socket entry (
	fixed binary(31) reference,
	fixed binary(31) reference,
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_ACCEPT                                                        */
/*                                                                          */
/*	Accept incoming SSL connection                                      */
/*                                                                          */
/*  context = SSL socket                                                    */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_ssl_accept entry (
	fixed binary(31) reference,
	any optional,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_CONNECT                                                       */
/*                                                                          */
/*	Establish an SSL connection to a remote system.                     */
/*                                                                          */
/*  context = SSL socket                                                    */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_ssl_connect entry (
	fixed binary(31) reference,
	any optional,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_SHUTDOWN                                                      */
/*                                                                          */
/*	Shutdown SSL socket (don't delete socket)                           */
/*                                                                          */
/*  context = SSL socket                                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_ssl_shutdown entry (
	fixed binary(31) reference,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_CLOSE                                                         */
/*                                                                          */
/*	Close an SSL socket                                                 */
/*                                                                          */
/*	socket	= socket to close                                           */
/*                                                                          */
dcl netlib_ssl_close entry (
	fixed binary(31) reference)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_READ                                                          */
/*                                                                          */
/*	Read data from SSL socket                                           */
/*                                                                          */
/*  context = SSL socket                                                    */
/*  buffer	= receive buffer                                            */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_ssl_read entry (
	fixed binary(31) reference,
	character(*),
	any optional,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_WRITE                                                         */
/*                                                                          */
/*	Write data to SSL socket                                            */
/*                                                                          */
/*  context = SSL socket                                                    */
/*  buffer	= receive buffer                                            */
/*  timeout	= optional, read timeout                                    */
/*	iosb	= optional, I/O status block                                */
/*	astadr	= optional, I/O completion AST                              */
/*	astprm	= optional, AST parameter                                   */
/*                                                                          */
dcl netlib_ssl_write entry (
	fixed binary(31) reference,
	character(*),
	any optional,
	1 like NETLIBIOSBDEF reference optional truncate,
	entry value optional truncate,
	any value optional truncate)
	returns (fixed binary(31));
/*                                                                          */
/* NETLIB_SSL_VERSION                                                       */
/*                                                                          */
/*	Return OpenSSL library version                                      */
/*	                                                                    */
/*	strver	= optional, string to receive version string                */
/*	retlen	= optional, return length of string                         */
/*	numver  = optional, longword to receive version as number           */
/*                                                                          */
dcl netlib_ssl_version entry (
	character(*) optional truncate,
	fixed binary(15) reference optional truncate,
	fixed binary(31) reference optional truncate)
	returns (fixed binary(31));
